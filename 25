#include <reg52.h>
#include <intrins.h>

#define uchar unsigned char		// 以后unsigned char就可以用uchar代替
#define uint  unsigned int		// 以后unsigned int 就可以用uint 代替

sbit Key1     = P1^1;					// 按键1，模式切换按键
sbit Key2     = P1^2;					// 按键2，设置时间按键
sbit Key3     = P1^3; 				// 按键3，减按键      
sbit Key4     = P1^4;					// 按键4，加按键
sbit Key5     = P1^5;					// 按键5，开始/取消计时按键
sbit Ceju    = P1^6;					// 红外测距模块
sbit ADC_CLK  = P2^0; 				// ADC0832的CLK引脚
sbit ADC_DAT  = P2^1; 				// ADC0832的DI/DO引脚
sbit ADC_CS   = P2^3; 				// ADC0832的CS引脚
sbit Module   = P2^2;					// 人体红外检测模块
sbit Lamp     = P2^4; 				// 台灯控制引脚
sbit LcdEn_P  = P2^5;     		// 1602液晶的EN管脚
sbit LcdRw_P  = P2^6;     		// 1602液晶的RW管脚 
sbit LcdRs_P  = P2^7;     		// 1602液晶的RS管脚       
sbit Buzzer_P = P3^6;					// 蜂鸣器

uchar gMode=0;								// 模式，=0是自动，=1是手动
uchar gCount1=0;							// 全局计时变量1
uchar gCount2=0;							// 全局计时变量2
uchar gIndex;									// 亮度变量，0是最暗，9是最亮，一共10档
uint  gTime=0;								// 计时变量，用于计时多久没检测到有人
uchar gStudyTime=3;						// 默认的提醒时间是3分钟
uint  gSecond;								// 计时变量，用于计时学习了多少秒



/*********************************************************/
// 毫秒级的延时函数，time是要延时的毫秒数
/*********************************************************/
void DelayMs(uint time)
{
	uint i,j;
	for(i=0;i<time;i++)
		for(j=0;j<112;j++);
}


/*********************************************************/
// 1602液晶写命令函数，cmd就是要写入的命令
/*********************************************************/
void LcdWriteCmd(uchar cmd)
{ 
	LcdRs_P = 0;
	LcdRw_P = 0;
	LcdEn_P = 0;
	P0=cmd;
	DelayMs(2);
	LcdEn_P = 1;    
	DelayMs(2);
	LcdEn_P = 0;	
}


/*********************************************************/
// 1602液晶写数据函数，dat就是要写入的数据
/*********************************************************/
void LcdWriteData(uchar dat)
{
	LcdRs_P = 1; 
	LcdRw_P = 0;
	LcdEn_P = 0;
	P0=dat;
	DelayMs(2);
	LcdEn_P = 1;    
	DelayMs(2);
	LcdEn_P = 0;
}


/*********************************************************/
// 1602液晶初始化函数
/*********************************************************/
void LcdInit()
{
	LcdWriteCmd(0x38);        // 16*2显示，5*7点阵，8位数据口
	LcdWriteCmd(0x0C);        // 开显示，不显示光标
	LcdWriteCmd(0x06);        // 地址加1，当写入数据后光标右移
	LcdWriteCmd(0x01);        // 清屏
}


/*********************************************************/
// 液晶光标定位函数
/*********************************************************/
void LcdGotoXY(uchar line,uchar column)
{
	// 第一行
	if(line==0)        
		LcdWriteCmd(0x80+column); 
	 // 第二行
	if(line==1)        
		LcdWriteCmd(0x80+0x40+column); 
}



/*********************************************************/
// 液晶输出字符串函数
/*********************************************************/
void LcdPrintStr(uchar *str)
{
	while(*str!='\0')
		LcdWriteData(*str++);
}



/*********************************************************/
// 液晶输出数字（0-99）
/*********************************************************/
void LcdPrintNum(uchar num)
{
	LcdWriteData(num/10+48);			// 十位
	LcdWriteData(num%10+48); 			// 个位
}



/*********************************************************/
// 液晶显示控制模式
/*********************************************************/
void LcdPrintMode(uchar mode)
{
	LcdGotoXY(0,5);							// 光标定位
	
	if(mode==0)									// 如果是自动模式
		LcdPrintStr("ZD");				// 则显示 ZD
	else												// 如果是手动模式
		LcdPrintStr("SD");				// 则显示 SD
}



/*********************************************************/
// 液晶显示亮度等级
/*********************************************************/
void LcdPrintLight(uchar light)
{
	LcdGotoXY(0,15);						// 光标定位
	LcdWriteData(light+48);			// 显示亮度等级
}



/*********************************************************/
// 液晶显示初始化
/*********************************************************/
void LcdShowInit()
{
	LcdGotoXY(0,0);											// 液晶光标定位到第0行
	LcdPrintStr("Mode:    Light: ");		// 液晶第0行显示"Mode:    Light: "
	LcdGotoXY(1,0);											// 液晶光标定位到第1行
	LcdPrintStr("Time 00:00      ");		// 液晶第1行显示"Time 00:00      "
	LcdPrintMode(gMode);								// 显示控制模式
}



/*********************************************************/
// ADC0832的时钟脉冲
/*********************************************************/
void WavePlus()
{
	_nop_();
	ADC_CLK = 1;
	_nop_();
	ADC_CLK = 0;
}



/*********************************************************/
// 获取指定通道的A/D转换结果
/*********************************************************/
uchar Get_ADC0832()
{ 
	uchar i;
	uchar dat1=0;
	uchar dat2=0;
	
	ADC_CLK = 0;				// 电平初始化
	ADC_DAT = 1;
	_nop_();
	ADC_CS = 0;
	WavePlus();					// 起始信号 
	ADC_DAT = 1;
	WavePlus();					// 通道选择的第一位
	ADC_DAT = 0;      
	WavePlus();					// 通道选择的第二位
	ADC_DAT = 1;
	
	for(i=0;i<8;i++)		// 第一次读取
	{
		dat1<<=1;
		WavePlus();
		if(ADC_DAT)
			dat1=dat1|0x01;
		else
			dat1=dat1|0x00;
	}
	
	for(i=0;i<8;i++)		// 第二次读取
	{
		dat2>>= 1;
		if(ADC_DAT)
			dat2=dat2|0x80;
		else
			dat2=dat2|0x00;
		WavePlus();
	}
	
	_nop_();						// 结束此次传输
	ADC_DAT = 1;
	ADC_CLK = 1;
	ADC_CS  = 1;   

	if(dat1==dat2)			// 返回采集结果
		return dat1;
	else
		return 0;
} 



/*********************************************************/
// 定时器初始化
/*********************************************************/
void TimerInit()
{
	TMOD = 0x11;				// 使用定时器0和定时器1，都是工作方式1
	TH0  = 252;					// 给定时器0的TH0装初值
	TL0  = 24;					// 给定时器0的TL0装初值	
	TH1  = 60;					// 给定时器1的TH1装初值
	TL1  = 176;					// 给定时器1的TL1装初值	
	ET0  = 1;						// 定时器0中断使能
	ET1  = 1;						// 定时器1中断使能
	EA   = 1;						// 打开总中断
	TR0	 = 1;						// 启动定时器0
}



/*********************************************************/
// 手动控制
/*********************************************************/
void ManualControl()
{
	// 亮度减少
	if(Key3==0)									// 如果按键3被按下去
	{
		if(gIndex>0)							// 只要当前亮度不为最低才能减少亮度
		{
			gIndex--;								// 亮度降低一档
			LcdPrintLight(gIndex);	// 液晶屏显示台灯亮度
			DelayMs(300);						// 延时0.3秒
		}
	}
	
	// 亮度增加
	if(Key4==0)									// 如果按键4被按下去
	{
		if(gIndex<9)							// 只要当前亮度不为最高才能增加亮度
		{
			gIndex++;								// 亮度增加一档
			LcdPrintLight(gIndex);	// 液晶屏显示台灯亮度
			DelayMs(300);						// 延时0.3秒
		}
	}
}



/*********************************************************/
// 自动控制
/*********************************************************/
void AutoControl(uchar num)
{
	if(num<59)														// 最亮
		gIndex=9;
	else if((num>65)&&(num<81))						// 第二亮
		gIndex=8;
	else if((num>87)&&(num<103))					// 第三亮
		gIndex=7;
	else if((num>109)&&(num<125))
		gIndex=6;
	else if((num>131)&&(num<147))
		gIndex=5;
	else if((num>153)&&(num<169))
		gIndex=4;
	else if((num>175)&&(num<191))
		gIndex=3;
	else if((num>197)&&(num<213))
		gIndex=2;
	else if((num>219)&&(num<235))
		gIndex=1;
	else if(num>241)										 // 最暗
		gIndex=0;
}

/*********************************************************/
// 蜂鸣器报警判断（距离过近）
/*********************************************************/
void AlarmJudge()
{
	if(Ceju==0)				// 距离是否过近
	{
		Buzzer_P=0;				// 是的话启动蜂鸣器
	}
	else
	{
		Buzzer_P=1;				// 否的话关闭蜂鸣器
	}
}
/*********************************************************/
// 主函数
/*********************************************************/
void main()
{
	uchar ret,i;
	
	TimerInit(); 							// 定时器初始化
	LcdInit();								// 液晶屏功能初始化
	LcdShowInit();						// 液晶屏内容初始化
	
	ret=Get_ADC0832();				// 获取AD采集结果(环境光照强度)
	AutoControl(ret);					// 上电先进行一次自动亮度控制	
	AutoControl(ret+7);
	
	while(1)
	{
		/* 模式切换控制 */
		if(Key1==0)									// 如果按键1被按下去
		{
			if(gMode==1)							// 切换模式变量
			{
				gMode=0;
				LcdPrintMode(gMode);		// 显示控制模式
			}
			else
			{
				gMode=1;
				LcdPrintMode(gMode);		// 显示控制模式
			}
			
			if(gMode==0)							// 如果切换后是自动模式的话
			{
				ret=Get_ADC0832();			// 获取AD采集结果(环境光照强度)
				AutoControl(ret);				// 进行一次自动亮度调整	
				AutoControl(ret+7);
			}
			DelayMs(10);							// 延时消除按键按下的抖动
			while(!Key1);							// 等待按键释放
			DelayMs(10);							// 延时消除按键松开的抖动
		}
		
		/* 定时时间设置 */
		if(Key2==0)
		{
			LcdGotoXY(0,0);											// 液晶光标定位
			LcdPrintStr("    Time Set    ");		// 液晶第0行显示"    Time Set    "
			LcdGotoXY(1,0);											// 液晶光标定位
			LcdPrintStr("        min     ");		// 液晶第1行显示"        min     "
			LcdGotoXY(1,5);											// 液晶光标定位
			LcdPrintNum(gStudyTime);						// 显示时间分钟数
			
			DelayMs(10);												// 延时消除按键按下的抖动
			while(!Key2);												// 等待按键释放
			DelayMs(10);												// 延时消除按键松开的抖动
			
			while(1)
			{
				// 数字减少
				if(Key3==0)										// 如果按键3被按下去
				{
					if(gStudyTime>1)						// 判断当前时间是否大于1分钟
					{
						gStudyTime--;							// 当前时间大于1分钟的话则减去1
						LcdGotoXY(1,5);						// 液晶光标定位
						LcdPrintNum(gStudyTime);	// 显示时间分钟数
						DelayMs(300);							// 延时0.3秒
					}
				}
				
				// 数字增加
				if(Key4==0)										// 如果按键4被按下去
				{
					if(gStudyTime<99)						// 判断当前时间是否小于99分钟
					{
						gStudyTime++;							// 当前时间小于99分钟的话则加上1
						LcdGotoXY(1,5);						// 液晶光标定位
						LcdPrintNum(gStudyTime);	// 显示时间分钟数
						DelayMs(300);							// 延时0.3秒
					}
				}
				
				// 退出设置
				if(Key2==0)
				{
					break;
				}
			}
			LcdShowInit();									// 液晶屏内容初始化
			DelayMs(10);										// 延时消除按键按下的抖动
			while(!Key2);										// 等待按键释放
			DelayMs(10);										// 延时消除按键松开的抖动
		}
		
		
		/* 开始/停止计时控制 */
		if(Key5==0)
		{
			if(TR1==0)											// 如果之前是停止状态
			{
				gSecond=0;										// 计时时间清零
				TR1=1;												// 启动定时器开始计时
			}
			else														// 如果之前是计时状态
			{
				TR1=0;												// 停止定时器计时		
				gSecond=0;										// 计时时间清零
				LcdGotoXY(1,5);								// 液晶光标定位
				LcdPrintStr("00:00");					// 液晶屏显示的计时时间清零
			}
			
			DelayMs(10);										// 延时消除按键按下的抖动
			while(!Key5);										// 等待按键释放
			DelayMs(10);										// 延时消除按键松开的抖动
		}
		
		if(TR1==1)												// 如果当前正在计时过程中
		{
			LcdGotoXY(1,5);									// 液晶光标定位
			LcdPrintNum(gSecond/60);				// 刷新分钟显示
			LcdGotoXY(1,8);									// 液晶光标定位
			LcdPrintNum(gSecond%60);				// 刷新秒钟显示
			
			if(gSecond/60==gStudyTime)			// 判断计时的分钟是否和设置的分钟数一致
			{
				TR1=0;												// 是的话则表示计时时间到，停止定时器计时
				for(i=0;i<6;i++)							// 控制蜂鸣器响6下
				{
					Buzzer_P=0;
					DelayMs(300);
					Buzzer_P=1;
					DelayMs(300);
				}
			}
		}
		
		/* 蜂鸣器报警判断（距离过近） */
		AlarmJudge();	
		/* 亮度控制 */
		if(gMode==1)								// 如果是手动模式
		{
			ManualControl();					// 则进行手动控制
		}
		else												// 如果是自动模式
		{
			if(gTime<30000)						// 如果最近30秒内检测到有人
			{
				ret=Get_ADC0832();			// 获取AD采集结果(环境光照强度)
				AutoControl(ret);				// 进行自动控制	
				DelayMs(200);
			}
		}
		LcdPrintLight(gIndex);			// 液晶屏显示台灯亮度
		
		/*检测是否有人*/
		if(Module==1)
		{
			gTime=0;								// 检测到有人，则把30秒计时清零
		}
		if(gTime>30000)						// 如果gTime的值超过了30000
		{
			gTime=30000;						// 则把gTime的值重新赋值为30000，避免过大溢出
			gIndex=0;								// 如果30秒检测不到有人，则把台灯熄灭
		}
	}
}


/*********************************************************/
// 定时器0服务程序，1毫秒
/*********************************************************/
void Timer0(void) interrupt 1
{
	TH0  = 252;						// 给定时器0的TH0装初值
	TL0  = 24;						// 给定时器0的TL0装初值	
	
	if(gMode==0)
	{
		gTime++;						// 自动模式下，每1毫秒gTime变量加1
	}
	
	gCount1++;						// 每1毫秒，gCount1变量加1
	
	if(gCount1==10)				// 如果gCount1加到10了
	{
		gCount1=0;					// 则将gCount1清零，进入新一轮的计时
		if(gIndex!=0)				// 如果说台灯不是最暗的(熄灭)
		{
			Lamp=0;						// 则把台灯点亮
		}
	}
	if(gCount1==gIndex)		// 如果gCount1计数到和gIndex一样了
	{
		if(gIndex!=9)				// 如果说台灯不是最亮的
		{
			Lamp=1;						// 则把台灯熄灭
		}
	}
}



/*********************************************************/
// 定时器1服务程序，50毫秒
/*********************************************************/
void Timer1(void) interrupt 3
{
	TH1  = 60;						// 给定时器1的TH1装初值
	TL1  = 176;						// 给定时器1的TL1装初值	
	
	gCount2++;						// 每50毫秒，gCount2变量加1
	if(gCount2==20)				// 如果gCount2加到20了(即1秒)			
	{
		gCount2=0;					// 则将gCount2清零，进入新一轮的计时
		gSecond++;					// 计时秒加1
	}
}




